#include <LedControl.h>
#include <Keypad.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

#define DIN_MATRIX1 9
#define CS_MATRIX1 5
#define CLK_MATRIX1 13

#define DIN_MATRIX2 10
#define CS_MATRIX2 6
#define CLK_MATRIX2 13

#define X_SEGMENTS 8
#define Y_SEGMENTS 8

int playerX = 0;
int playerY = 0;

bool buttonPressed = false;

LedControl lc_M1 = LedControl(DIN_MATRIX1, CLK_MATRIX1, CS_MATRIX1, 1);
LedControl lc_M2 = LedControl(DIN_MATRIX2, CLK_MATRIX2, CS_MATRIX2, 1);
LedControl* l = nullptr;

const byte ROWS = 1;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'}
};
byte rowPins[ROWS] = {12};
byte colPins[COLS] = {11, 8, 7, 4};

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

LiquidCrystal_I2C lcd(0x3F, 16, 2);

int matrix1[8][8];
int matrix2[8][8];
bool hit1[8][8] = {false};  // Inițializare matrice hit1 cu false
bool hit2[8][8] = {false};  // Inițializare matrice hit2 cu false

void setup() {
  lc_M1.shutdown(0, false);
  lc_M1.setIntensity(0, 8);
  lc_M1.clearDisplay(0);

  lc_M2.shutdown(0, false);
  lc_M2.setIntensity(0, 8);
  lc_M2.clearDisplay(0);

  lcd.begin();
  lcd.backlight();

  pinMode(2, INPUT_PULLUP);
  l = &lc_M1;
  updateLCD(1, false, playerX, playerY);
  randomSeed(millis());
  generateBoats();
  setLedsMatrix();
}

void generateBoats(){
  int boatsLength[]={2,3,3,4,5};

  memset(matrix1, 0, sizeof(matrix1));
  memset(matrix2, 0, sizeof(matrix2));

  int x1,x2,y1,y2, pos1,pos2;
  for(int j=0;j<5;j++){
    bool isValid=false;
    pos1=random(0,4);
    pos2=random(0,4);
    while(!isValid){
      switch(pos1){
        case 0:{//position is to the right
          x1=random(0,8-boatsLength[j]);
          y1=random(0,8);
          for(int i=0;i<boatsLength[j];i++){
            if(matrix1[y1][x1+i]==0){
              matrix1[y1][x1+i]=j+1;
              isValid=true;
            }else{
              for(int k=0;k<i;k++){
                matrix1[y1][x1+k]=0;
              }
              isValid=false;
              break;
            }
          }
          break;
        }
        case 1:{//position is to the left
          x1=random(0+boatsLength[j],8);
          y1=random(0,8);
          for(int i=0;i<boatsLength[j];i++){
           if(matrix1[y1][x1-i]==0){
              matrix1[y1][x1-i]=j+1;
              isValid=true;
            }else{
              for(int k=0;k<i;k++){
                matrix1[y1][x1-k]=0;
              }
              isValid=false;
              break;
            }
          }
          break;
        }
        case 2:{//position is up
          x1=random(0,8);
          y1=random(0,8-boatsLength[j]);
          for(int i=0;i<boatsLength[j];i++){
            if(matrix1[y1+i][x1]==0){
              matrix1[y1+i][x1]=j+1;
              isValid=true;
            }else{
              for(int k=0;k<i;k++){
                matrix1[y1+k][x1]=0;
              }
              isValid=false;
              break;
            }
          }
          break;
        }
        case 3:{
          x1=random(0,8);
          y1=random(boatsLength[j], 8);
          for(int i=0;i<boatsLength[j];i++){
            if(matrix1[y1-i][x1]==0){
              matrix1[y1-i][x1]=j+1;
              isValid=true;
            }else{
              for(int k=0;k<i;k++){
                matrix1[y1-k][x1]=0;
              }
              isValid=false;
              break;
            }
          }
          break;
        }
        default:{
          Serial.println("The position is out of bounds. There is an error");
        }
      }
    }

    isValid=false;
    while(!isValid){
      switch(pos2){
        case 0:{//position is to the right
          x2=random(0,8-boatsLength[j]);
          y2=random(0,8);
          for(int i=0;i<boatsLength[j];i++){
            if(matrix2[y2][x2+i]==0){
              matrix2[y2][x2+i]=j+1;
              isValid=true;
            }else{
              for(int k=0;k<i;k++){
                matrix2[y2][x2+k]=0;
              }
              isValid=false;
              break;
            }
          }
          break;
        }
        case 1:{//position is to the left
          x2=random(0+boatsLength[j],8);
          y2=random(0,8);
          for(int i=0;i<boatsLength[j];i++){
           if(matrix2[y2][x2-i]==0){
              matrix2[y2][x2-i]=j+1;
              isValid=true;
            }else{
              for(int k=0;k<i;k++){
                matrix2[y2][x2-k]=0;
              }
              isValid=false;
              break;
            }
          }
          break;
        }
        case 2:{//position is up
          x2=random(0,8);
          y2=random(0,8-boatsLength[j]);
          for(int i=0;i<boatsLength[j];i++){
            if(matrix2[y2+i][x2]==0){
              matrix2[y2+i][x2]=j+1;
              isValid=true;
            }else{
              for(int k=0;k<i;k++){
                matrix2[y2+k][x2]=0;
              }
              isValid=false;
              break;
            }
          }
          break;
        }
        case 3:{
          x2=random(0,8);
          y2=random(boatsLength[j], 8);
          for(int i=0;i<boatsLength[j];i++){
            if(matrix2[y2-i][x2]==0){
              matrix2[y2-i][x2]=j+1;
              isValid=true;
            }else{
              for(int k=0;k<i;k++){
                matrix2[y2-k][x2]=0;
              }
              isValid=false;
              break;
            }
          }
          break;
        }
        default:{
          Serial.println("The position is out of bounds. There is an error");
        }
      }
    }
  }
}

int score1 = 0;
int score2 = 0;

bool isShipSunk(int matrix[8][8], bool hit[8][8], int type) {
  for (int i = 0; i < 8; i++) {
    for (int j = 0; j < 8; j++) {
      if (matrix[i][j] == type && !hit[i][j]) {
        return false;
      }
    }
  }
  return true;
}

void eliminateShip(int matrix[8][8], bool hit[8][8], LedControl& lc, int type, int& score) {
  for (int i = 0; i < 8; i++) {
    for (int j = 0; j < 8; j++) {
      if (matrix[i][j] == type) {
        matrix[i][j] = 0;
        lc.setLed(0, i, j, false);
        hit[i][j] = true;
        score++;
      }
    }
  }
}

bool isHit(int matrix[8][8], bool hit[8][8], LedControl& lc, int x, int y, int& score) {
  if (matrix[x][y] != 0 && !hit[x][y]) {
    hit[x][y] = true;
    lc.setLed(0, x, y, true);
    if (isShipSunk(matrix, hit, matrix[x][y])) {
      eliminateShip(matrix, hit, lc, matrix[x][y], score);
    }
        return true;
  }
  return false;
}

bool isHit1(int x, int y) {
  return isHit(matrix1, hit1, lc_M1, x, y, score1);
}

bool isHit2(int x, int y) {
  return isHit(matrix2, hit2, lc_M2, x, y, score2);
}

void setLedsMatrix() {
  for (int i = 0; i < 8; i++) {
    for (int j = 0; j < 8; j++) {
      lc_M1.setLed(0, i, j, matrix1[i][j] != 0);
      lc_M2.setLed(0, i, j, matrix2[i][j] != 0);
    }
  }
}

void updateLEDMatrix(LedControl *lc, int x, int y) {
  (*lc).setLed(0, x, y, true);
}

void movePlayer(LedControl *l, int x, int y) {
  (*l).setLed(0, playerX, playerY, false);
  playerX = constrain(playerX + x, 0, X_SEGMENTS - 1);
  playerY = constrain(playerY + y, 0, Y_SEGMENTS - 1);
}

void updateLCD(int player, bool hit, int hitX, int hitY) {
  lcd.clear();

  String message;
  if (score1 < 17 && score2 < 17) {  // 17 este numărul total de segmente pentru toate bărcile
    if (player == 1) {
      message = "Player 1's turn";
    } else if (player == 2) {
      message = "Player 2's turn";
    }

    if (hit) {
      message += " Hit at: ";
      message += String(hitX);
      message += ",";
      message += String(hitY);
    }
  } else {
    if (player == 1) {
      message = "Player 2 WON ";
    } else if (player == 2) {
      message = "Player 1 WON ";
    }
    message += String(score1);
    message += "-";
    message += String(score2);

    if (hit) {
      message += " Hit at: ";
      message += String(hitX);
      message += ",";
      message += String(hitY);
    }
  }

  for (int i = 0; i < message.length(); i++) {
    lcd.setCursor(i % 16, i / 16);
    lcd.print(message[i]);
  }
}

void loop() {
  bool currentButtonState = digitalRead(2) == LOW;

  if (currentButtonState && !buttonPressed) {
    if (l == &lc_M1) {
      l = &lc_M2;
      updateLCD(2, isHit2(playerX, playerY), playerX, playerY);
    } else {
      l = &lc_M1;
      updateLCD(1, isHit1(playerX, playerY), playerX, playerY);
    }

    if (l == &lc_M1) {
      lc_M2.setLed(0, playerX, playerY, false);
    } else {
      lc_M1.setLed(0, playerX, playerY, false);
    }
  }

  buttonPressed = currentButtonState;
  char key = keypad.getKey();
  if (key != NO_KEY) {
    if (key == '1') {
      movePlayer(l, 0, 1);
    } else if (key == '2') {
      movePlayer(l, 0, -1);
    } else if (key == '3') {
      movePlayer(l, -1, 0);
    } else if (key == 'A') {
      movePlayer(l, 1, 0);
    }
  }

  updateLEDMatrix(l, playerX, playerY);
  setLedsMatrix();
  if (score1 >= 17 || score2 >= 17) {  // Condiție de victorie actualizată
    delay(5000);
    exit(0);
  }
}
